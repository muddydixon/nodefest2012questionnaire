// Generated by CoffeeScript 1.4.0
(function() {
  var colors, drawBar, drawChord, layout, paneLength;

  layout = d3.layout.chord().sortGroups(d3.descending).sortSubgroups(d3.descending).sortChords(d3.descending).padding(.02);

  colors = d3.scale.category20();

  paneLength = -1;

  drawChord = function(title, pane) {
    var H, W, arc, h, larc, margin, r0, r1, w;
    $(pane).find('h2').text(title);
    W = $(pane).width();
    H = w;
    w = 0 | W / 3 - 10;
    h = w;
    margin = w + 10;
    r1 = Math.min(w, h) / 2 - 4;
    r0 = r1 - 10;
    arc = d3.svg.arc().innerRadius(r0).outerRadius(r1);
    larc = d3.svg.arc().innerRadius(r1).outerRadius(r1 + 10);
    return function(data) {
      var fromId, g, i, j, line, matrix, max, sessions, svg, toId, _i, _j, _k, _len, _len1, _len2, _ref, _ref1;
      svg = d3.select("" + pane + " .body").append('svg').attr('width', '100%').attr('height', '100%');
      paneLength++;
      pane = svg.append('g').attr('class', 'pane').attr('transform', "translate(" + (w / 2 + margin) + "," + (h / 2 + margin) + ")");
      sessions = [];
      matrix = [];
      for (_i = 0, _len = data.length; _i < _len; _i++) {
        line = data[_i];
        fromId = sessions.indexOf(line.from);
        if (fromId === -1) {
          fromId = sessions.length;
          sessions[fromId] = line.from;
        }
        toId = sessions.indexOf(line.to);
        if (toId === -1) {
          toId = sessions.length;
          sessions[toId] = line.to;
        }
        if (matrix[fromId] == null) {
          matrix[fromId] = [];
        }
        matrix[fromId][toId] = +line.count;
        matrix[fromId][fromId] = 0;
      }
      max = d3.max(matrix.map(function(d) {
        return d.length;
      }));
      _ref = d3.range(0, max);
      for (_j = 0, _len1 = _ref.length; _j < _len1; _j++) {
        i = _ref[_j];
        _ref1 = d3.range(0, max);
        for (_k = 0, _len2 = _ref1.length; _k < _len2; _k++) {
          j = _ref1[_k];
          matrix[i][j] = matrix[i][j] || 0;
        }
      }
      layout.matrix(matrix);
      g = pane.selectAll('g.group').data(layout.groups).enter().append('g').attr('class', 'group');
      g.append('path').style('fill', function(d) {
        return colors(d.index);
      }).style('stroke', function(d) {
        return '#333';
      }).attr('id', function(d) {
        return "group" + d.index;
      }).attr('d', d3.svg.arc().innerRadius(r0).outerRadius(r1)).append('title').text(function(d) {
        return sessions[d.index];
      });
      pane.append('g').attr('class', 'chord').selectAll('path').data(layout.chords).enter().append('path').attr('d', d3.svg.chord().radius(r0)).attr('class', function(d) {
        return "source" + d.source.index;
      }).style('fill', function(d) {
        return colors(d.target.index);
      }).style('stroke', 'silver').style('opacity', 0.7);
      return pane.selectAll('text').data(layout.groups).enter().append('text').attr('width', 100).text(function(d) {
        return sessions[d.index];
      }).attr('transform', function(d) {
        return "translate(" + (larc.centroid(d)) + ") rotate(" + ((d.endAngle + d.startAngle) / 2 / Math.PI * 180 - 90) + ")";
      });
    };
  };

  drawBar = function(title, pane) {
    var H, W, h, margin, w;
    $(pane).find('h2').text(title);
    W = $(pane).width();
    H = W;
    margin = 30;
    w = W - margin;
    h = H - margin;
    $(pane).find('.body').height(H);
    return function(data) {
      var g, height, svg, x, xaxis, y, yaxis;
      colors = d3.scale.category10();
      x = d3.scale.linear().range([0, w]).domain([0, data.length]);
      y = d3.scale.linear().range([h, 0]).domain([
        0, d3.max(d3.extent(data, function(d) {
          return +d.count;
        }))
      ]);
      height = d3.scale.linear().range([0, h]).domain([
        0, d3.max(d3.extent(data, function(d) {
          return +d.count;
        }))
      ]);
      xaxis = d3.svg.axis().scale(x).orient('bottom');
      yaxis = d3.svg.axis().scale(y).orient('left');
      svg = d3.select("" + pane + " .body").append('svg').attr('width', W).attr('height', H).append('g').attr('transform', "translate(" + margin + ", 20)");
      g = svg.selectAll('g').data(data).enter().append('g');
      g.append('rect').attr('x', function(d, i) {
        return x(i);
      }).attr('y', function(d) {
        return y(+d.count);
      }).attr('width', w / data.length - 10).attr('height', function(d) {
        return height(+d.count);
      }).style('fill', function(d, i) {
        return colors(i);
      });
      g.append('text').attr('x', function(d, i) {
        return x(i);
      }).attr('transform', function(d, i) {
        return "translate(" + (x(i) + 15) + ", " + (h + x(i) - 5) + ") rotate(-90)";
      }).text(function(d) {
        return d.name;
      });
      return svg.append('g').call(yaxis).style('fill', 'none').style('stroke', '#333');
    };
  };

  d3.csv("./session_rel.csv", drawChord('セッション 関係', '#session-rel'));

  d3.csv("./talk_rel.csv", drawChord('LT 関係', '#talk-rel'));

  d3.csv("./age.csv", drawBar('年齢', '#age'));

  d3.csv("./job.csv", drawBar('仕事', '#job'));

  d3.csv("./session.csv", drawBar('セッション', '#session'));

  d3.csv("./talk.csv", drawBar('LT', '#talk'));

}).call(this);
